{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PRATICA_GUIADA_Revisao_Python-2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Python é uma linguagem interpretada, ao contrário das linguagens compiladas, não é necessário traduzir as instruções para código de máquina (1s e 0s).\n",
    "\n",
    "#### Para poder executar o código escrito em python é necessário passar as instruções para um intérprete. Nos nossos cursos usaremos um ambiente de programação chamado jupyter-notebook, um aplicativo da web que é executado localmente, onde o texto (como este!) pode ser apresentado e que oferece a possibilidade de executar código.\n",
    "\n",
    "#### O formato de entrada para o nosso código é uma célula e para executar as instruções que digitamos basta pressionar `Shift`+`Enter` enquanto estivermos na célula."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A função `print()`\n",
    "\n",
    "#### Para ver os valores que uma expressão ou alguma variável assume, vamos usar a função print dando como argumento um tipo de dado string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Olá, mundo!\n"
     ]
    }
   ],
   "source": [
    "print('Olá, mundo!')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Como podemos ver nesta execução, o resultado do código aparece imediatamente sob a célula em que as instruções estão escritas."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tipos e estruturas de dados em Python 3.\n",
    "\n",
    "#### Para poder realizar nossas implementações, é necessário conhecer as propriedades dos dados que vamos usar e as operações que podem ser realizadas com eles. Isso pode parecer banal, mas existem diferenças importantes nos resultados.\n",
    "\n",
    "#### A seguir, um exemplo em que podemos importar os tipos de dados:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Soma dos dados tipo `int`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40\n"
     ]
    }
   ],
   "source": [
    "print( 20 + 20 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### concatenação dos dados tipo strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020\n"
     ]
    }
   ],
   "source": [
    "print('20'+'20')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### No primeiro caso, o resultado de uma operação aritmética pode ser observado, enquanto no último uma operação de concatenação foi realizada em grupos de caracteres. Diferentes tipos de dados possuem operações associadas que podem responder de diferentes maneiras de acordo com suas definições."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tipos e estrutura de dados: inteiros (em python `int`), reais (`float`) e complexos (`complex`).\n",
    "\n",
    "#### A seguir, apresentamos tipos `type` de dados numéricos e algumas operações de exemplo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O número 3 é: <class 'int'>\n",
      "O número 3.14 é: <class 'float'>\n",
      "O número 3+2j é: <class 'complex'>\n",
      "5.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('O número 3 é:', type(3))\n",
    "\n",
    "print('O número 3.14 é:', type(3.14159))\n",
    "\n",
    "print('O número 3+2j é:', type(complex(3 + 2)))\n",
    "print(abs(complex(3 + 4j)))\n",
    "abs(-2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Algumas operações numéricas de caráter aritméticos podem ser:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Adição de dois inteiros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n"
     ]
    }
   ],
   "source": [
    "print(45 + 55)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Subtração."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-50\n"
     ]
    }
   ],
   "source": [
    "print(50 - 100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Divisão. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5\n"
     ]
    }
   ],
   "source": [
    "print(6 / 12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Divisão inteira."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "print(22 // 12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Multiplicação."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "print(3 * 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Potenciação."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "243\n"
     ]
    }
   ],
   "source": [
    "print(3 ** 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Para poder atribuir números ou resultados de operações a variáveis, o operador `=` é usado, o nome da variável deve começar com uma letra, e certos caracteres não podem ser usados para defini-las, como acentos ou espaços (invisíveis) dentro do nome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Nota:\n",
    "\n",
    "#### Podemos ver que a primeira linha do exemplo a seguir...\n",
    "\n",
    "```python\n",
    "\n",
    "# atribuímos o valor 4 à variável num_1\n",
    "\n",
    "```\n",
    "\n",
    "#### ...é um comentário. Os comentários são úteis no sentido de que nos permitem fazer anotações no local em que uma tarefa é executada dentro do programa.\n",
    "\n",
    "\n",
    "#### Os comentários não são levados em conta como uma instrução, isso significa que o interpretador de python não os executa, como consequência eles só têm utilidade para as pessoas que veem as instruções.\n",
    "\n",
    "\n",
    "#### Para escrever um comentário, o símbolo numérico `#` deve ser preceder o texto e o texto deve ser de uma só linha. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70368744177664\n"
     ]
    }
   ],
   "source": [
    "# atribuímos o valor 4 à variável num_1\n",
    "num_1 = 4\n",
    "\n",
    "# atribuímos o valor 23 à variável num_2\n",
    "num_2 = 23\n",
    "\n",
    "# atribuímos o resultado de elevar num_1 à num_2\n",
    "resultado_potenciação = num_1 ** num_2\n",
    "\n",
    "# mostramos resultado\n",
    "print(resultado_potenciação)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Neste último exemplo podemos observar que, uma vez que atribuímos as magnitudes numéricas às variáveis, podemos operar com essas variáveis como se fossem um número."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Como poderíamos encontrar a raiz quadrada de `num1` (4), utilizando a operação de potenciação? Escreva-o em linguagem python na próxima célula e use print para mostrar o resultado:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "num1 = 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Qual é a diferença entre um dado `int` e um `float`? É possível usar esses dois tipos de dados na mesma operação aritmética? Qual é o tipo de dado resultante?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.4622888266898326\n"
     ]
    }
   ],
   "source": [
    "#Escreva o código abaixo para responder às perguntas propostas\n",
    "\n",
    "#2 == 2.0\n",
    "\n",
    "my_int = 2\n",
    "my_float = 1.3\n",
    "\n",
    "\n",
    "print(my_int**my_float)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tipos e estrutura de dados: Texto `str`.\n",
    "\n",
    "#### O tipo de dado de texto é chamado de `string` em python. Pode ser enunciado colocando um conjunto de caracteres entre aspas (duplas ou simples). Durante o curso, vamos trabalhar com várias operações sobre esses dados orientados à sua matematização.\n",
    "\n",
    "#### As strings são iteráveis (podem ser acessadas por partes), cada caractere tem uma posição que pode ser acessada através de um índice. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Índice:\n",
    "\n",
    "#### Os índices são valores inteiros que, no texto, indicam a posição de um caractere dentro da string. São enunciados colocando o valor inteiro entre colchetes [] depois da string ou de uma variável que o represente. Os índices são contados a partir de zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P 3\n"
     ]
    }
   ],
   "source": [
    "# Definimos uma variável de tipo string.\n",
    "text = 'Python3'\n",
    "\n",
    "# Acessamos a primeira e última posição dessa string.\n",
    "print(text[0], text[-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A função `print()` pode usar vários argumentos, entre eles, estão os elementos que serão impressos na saída padrão. No último caso, imprimimos o primeiro e o último elemento da `string` text."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sobre os índices negativos.\n",
    "\n",
    "#### Quando um índice é negativo, aponta para um elemento do final, isto é, o [-1] se torna o último elemento, o índice [-2] o penúltimo e assim por diante até o primeiro elemento do iterável.\n",
    "\n",
    "#### A seguir, um exemplo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "o o\n"
     ]
    }
   ],
   "source": [
    "# Definimos uma variável do tipo string.\n",
    "text = 'Python3'\n",
    "\n",
    "# Acessamos o elemento 4 (Pyth(o)n3) a partir de índices positivos e negativos.\n",
    "print(text[4], text[-3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Slicing.\n",
    "\n",
    "#### O slicing permite acessar partes contínuas da string com uma notação parecida com a dos índices. Eles também precisam ser magnitudes inteiras. Para fazer um slicing, os valores do índice devem ser dados entre colchetes, separados por dois pontos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ython3\n"
     ]
    }
   ],
   "source": [
    "# Definimos uma variável do tipo string.\n",
    "text = 'Python3 ou R?'\n",
    "\n",
    "# Entre colchetes definimos o primeiro e o último índice do sclicing.\n",
    "print(text[1:7])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### O primeiro índice aponta para o primeiro caractere da primeira palavra (incluído no subtexto), enquanto o último caractere aponta para o último caractere da palavra (não incluído no subtexto)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n"
     ]
    }
   ],
   "source": [
    "# Definimos uma variável do tipo string.\n",
    "text = 'Python3 ou R?'\n",
    "\n",
    "# Mostramos o elemento 7 do texto, que não é mostrado no slicing anterior.\n",
    "print(text[7])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A seguir, imprimir a palavra central do texto utilizando slicing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'uma'"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Definimos um texto\n",
    "text_2 = 'É uma string'\n",
    "\n",
    "# selecionar a palavra central com slicing\n",
    "text_2[2:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Concatenação.\n",
    "\n",
    "#### conjuntos de caracteres podem ser concatenados utilizando, como vimos, o operador de soma."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Texto de exemplo\n"
     ]
    }
   ],
   "source": [
    "concatenação = 'Texto de ' + \"exemplo\"\n",
    "print(concatenação)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Podemos observar que a operação:\n",
    "\n",
    "* Concatena as duas `strings` em uma maior.\n",
    "* Não adiciona espaço entre operandos.\n",
    "* Conserva a ordem de esquerda a direita.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Como havíamos mencionado, os tipos de dados trazem operações associadas - essas operações são conhecidas como métodos. Os métodos são um conjunto de instruções associadas aos tipos de dados que podem fazer alterações neles ou operações que resultem no retorno de algum resultado em outro tipo de dados."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Método `.isdigit()`.\n",
    "\n",
    "#### Este método retorna um tipo de dado booleano (verdadeiro ou falso). É verdadeiro quando a string associada pode ser representada como um inteiro e falso, caso contrário. Este método pode servir para decidir se uma string pode ser transformada em um número inteiro."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inteiro = '231' \n",
    "inteiro.isdigit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Como podemos ver, a chamada para os métodos é precedida por dois parênteses. A razão será comentada mais à frente, em definição de funções."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_inteiro = '3.14'\n",
    "no_inteiro.isdigit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Método `.split()`.\n",
    "\n",
    "#### Esse método associado a `strings` serve para separar um texto em subtextos menores. O resultado da separação é retornado em uma lista."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['um', 'dois', 'três', 'quatro']"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fazemos um chamado ao split diretamente de uma string\n",
    "lista = 'um dois três quatro'.split()\n",
    "lista"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['um', 'dois', 'três', 'quatro']"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Guardamos uma string em uma variável\n",
    "números = 'um dois três quatro'\n",
    "\n",
    "#separamos o conteúdo da variável com o método split\n",
    "números.split()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Proposta prática:  \n",
    "\n",
    "#### A seguir, veremos parte de um código que, a partir de uma lista de números aleatórios, retorna outra lista com números pares."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 é par\n",
      "3 não é par nem ímpar negativo\n",
      "1 não é par nem ímpar negativo\n",
      "8 é par\n",
      "-2 é par\n",
      "3.14259 não é par nem ímpar negativo\n",
      "-1 negativo e não par\n",
      "0 é par\n",
      "6 é par\n",
      "7 não é par nem ímpar negativo\n",
      "9 não é par nem ímpar negativo\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[2, 8, -2, 0, 6]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# inicializamos uma lista com números.\n",
    "lista_números = [2, 3, 1, 8, -2, 3.14259, -1, 0, 6, 7, 9]\n",
    "# inicializamos uma lista vazia.\n",
    "lista_pares = []\n",
    "\n",
    "# percorremos a lista.\n",
    "for número in lista_números:\n",
    "    #vemos se o número da lista é par.\n",
    "    if número % 2 == 0:\n",
    "        # inserimos no final da lista se for par\n",
    "        lista_pares.append(número)\n",
    "        print(número, 'é par')\n",
    "    elif número < 0:\n",
    "        print(número, 'negativo e não par')\n",
    "    \n",
    "    else:\n",
    "        print(número, 'não é par nem ímpar negativo')\n",
    "\n",
    "lista_pares      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(lista_pares)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tipos e estrutura de dados: Listas `list`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### As listas são estruturas de dados muito usadas em python. Nelas podemos depositar uma grande quantidade de dados: números, palavras, outras listas, etc.\n",
    "\n",
    "#### Na nossa proposta prática, podemos ver que trabalhamos com duas listas:\n",
    "\n",
    "``` python\n",
    "# inicializamos uma lista com números.\n",
    "lista_números = [2, 3, 1, 8, -2, 3.14259, -1, 0, 6, 7, 9]\n",
    "# inicializamos uma lista vazia.\n",
    "lista_pares = []\n",
    "```\n",
    "\n",
    "#### Na primeira lista, decidimos definir seus membros como números. Outros tipos de dados podem estar contidos nas listas. Também podemos ver que para definir uma lista não é necessário ter elementos. Em `lista_pares` por exemplo, você pode ver que ela está vazia.\n",
    "\n",
    "#### Uma das motivações para gerar listas vazias é a de poder ser preenchida de acordo com os condicionais que definiremos em nossos programas."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Método `.append()`.\n",
    "\n",
    "#### Permite adicionar um elemento no final de uma lista. É importante ressaltar que o elemento persiste dentro da lista, uma vez que é adicionado por este método."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "# Inicializamos uma lista vazia.\n",
    "lista_teste = []\n",
    "\n",
    "# Imprimimos a lista para ver como é.\n",
    "print(lista_teste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['sou uma string']\n"
     ]
    }
   ],
   "source": [
    "# Agora adicionamos um elemento à lista com append.\n",
    "lista_teste.append('sou uma string')\n",
    "\n",
    "# Imprimimos a lista\n",
    "print(lista_teste)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Podemos ver que o que foi adicionado à lista pelo `.append()` foi indicado ao colocar esse elemento entre os parênteses na chamada de método. \n",
    "\n",
    "#### O que aparece entre parênteses após a chamada de método é conhecido como argumento e, neste caso, o argumento para o método `.append()`,  é o elemento que será inserido no final da lista."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sou uma string', 23]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adicionamos outro elemento à lista.\n",
    "lista_teste.append(23)\n",
    "\n",
    "# Mostramos o estado da lista até esse ponto.\n",
    "lista_teste"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ao contrário de outras linguagens, em python, uma lista pode conter, simultaneamente, vários tipos de dados."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Iteração `for`.\n",
    "\n",
    "#### O poder dos programas está na capacidade de executar um conjunto de instruções repetidamente ao percorrer uma estrutura ou tipo de dados. Chamamos isso de \"iteração\". No nosso exemplo podemos ver uma dessas iterações:\n",
    "\n",
    "```python\n",
    "for número in lista_números:\n",
    "```\n",
    "#### A sintaxe para usar o iterador \"for\" em nosso exemplo tem basicamente 5 partes:\n",
    "\n",
    "    1) A chamada para `for`.\n",
    "    2) A definição de uma variável que representa cada elemento dentro dos membros que percorremos.\n",
    "    3) A chamada a `in`, que indica o que vamos percorrer.\n",
    "    4) A estrutura ou dado sobre a qual vamos iterar.\n",
    "    5) Os dois pontos que indicam que o corpo de instruções começa.\n",
    "\n",
    "#### A partir daqui, tudo que estiver dentro do ciclo será repetido enquanto a lista estiver sendo percorrida.\n",
    "\n",
    "```python\n",
    "# percorremos a lista.\n",
    "for número in lista_números:\n",
    "    #vemos se o número da lista é par.\n",
    "    if número % 2 == 0:\n",
    "        # inserimos no final da lista se for par\n",
    "        lista_pares.append(número)\n",
    "```\n",
    "#### É importante ressaltar que o uso de espaços tem um significado para o interpretador de python. No nosso exemplo podemos notar que as instruções dentro do for têm pelo menos 4 espaços antes de serem escritas - isso em python é chamado de indentação."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-8, -6, -4, -2, 0, 2, 4, 6, 8]\n"
     ]
    }
   ],
   "source": [
    "lista_números = [-9, -8, -7, -6, -5, -4, -3, -2, -1 , 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "lista_pares = []\n",
    "# percorremos a lista.\n",
    "for número in lista_números:\n",
    "    #vemos se o número da lista é par.\n",
    "    if número % 2 == 0:\n",
    "        # inserimos no final da lista se for par\n",
    "        lista_pares.append(número)\n",
    "print(lista_pares)        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Iteração `while`.\n",
    "\n",
    "#### A iteração `while` ocorre desde a inicialização de um objeto até o momento em que uma condição é alcançada, nesse momento a ação para ou outra ação passa a ser tomada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "while (count < 3):\n",
    "    print(count)\n",
    "    count = count + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "count = 1\n",
    "while (count != 3 ):\n",
    "    count = count + 1\n",
    "    print(count ** 2) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Condicionais if, elif, else.\n",
    "\n",
    "#### O condicional `if` permite realizar um conjunto de possíveis operações através da formulação de uma pergunta em termos de expressões que possam ser verdadeiras ou falsas. Estas operações são chamadas de operações \"booleanas\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A seguir, damos alguns exemplos das perguntas que resultam em um booleano:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Um número é igual a outro número?\n",
    "2 == 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "# Um número é maior do que outro número?\n",
    "print( 23 > -11 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Um tipo de dado é igual a outro?\n",
    "# isinstance([1,2,3], list)\n",
    "#isinstance(1, int)\n",
    "isinstance(1.0, float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# O texto está contido em outro texto?\n",
    "'dois' in 'tenho um texto aqui'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Acabamos de ver algumas expressões cujo resultado é um booleano. Essas expressões podem ser avaliadas por um conjunto de condicionais."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Condicional `if`.\n",
    "\n",
    "#### Voltando ao nosso exemplo, vamos selecionar os dados que se encaixam em algumas propriedades que pedimos. Para isso, usamos o condicional `if`. Esse condicional nos permite tomar uma decisão com relação a uma condição dentro do programa, e pode ser enunciado dessa forma:\n",
    "\n",
    "```python\n",
    "if número % 2 == 0:\n",
    "    # inserimos no final da lista se for par\n",
    "    lista_pares.append(número)\n",
    "    \n",
    "elif número < 0:\n",
    "        print(número, 'negativo e não par')\n",
    "    \n",
    "else:\n",
    "    print(número, 'não é par nem ímpar negativo')\n",
    "\n",
    "```\n",
    "#### A sintaxe para o `if` possui três partes:\n",
    "           \n",
    "    1) A chamada ao `if`.\n",
    "    2) Uma condição (que pode ser verdadeira ou falsa).\n",
    "    3) Os dois pontos que indicam que o corpo de instruções começa.\n",
    "\n",
    "#### A condição pode assumir várias formas dependendo do que procuramos. No nosso programa, perguntamos: \n",
    "\n",
    "    A variável número: deixa um resto depois de ser dividida pelo número 2?\n",
    "\n",
    "#### Esta pergunta é feita através de uma sentença no python onde usamos a operação módulo `%` que nos indica se há um resto no quociente de dois números ordenados, e o operador `==` que indica se existe igualdade entre os dois lados.\n",
    "\n",
    "#### Se a igualdade `==` for verdadeira, a instrução do corpo do `if` é seguida. Se a condição for falsa, as instruções do `if` são ignoradas.\n",
    "\n",
    "#### Assim como o `for`, o corpo do `if` é definido como as instruções depois dos dois pontos que estão a 4 espaços da chamada ao `if` (indentação). \n",
    "\n",
    "### Condicional `elif`.\n",
    "\n",
    "#### Quando o condicional `if` é avaliado como `False`, é possível avaliar outra condição relacionada com o primeiro `if`. No exemplo, usamos o condicional `elif`, cujo corpo é executado quando o primeiro `if` foi avaliado como `False` e a sentença enunciada depois do **elif** é *True*, ou seja, quando o número não é par (**if** avaliado como `False`) e quando o número é menor do que zero (`elif` avaliado como `True`).\n",
    "\n",
    "### Condicional `else`.\n",
    "\n",
    "#### Quando o condicional `if` é avaliado como `False` e não existem condicionais `elif`, ou eles são todos avaliados como `False`, então se executa o corpo do condicional `else`, se este for definido. No exemplo, quando o número não é par (`if` avaliado como `False`) e quando o número não é menor do que zero (único `elif` avaliado como `False`).\n",
    "\n",
    "#### Exemplo sintético:\n",
    "\n",
    "```python\n",
    "if condição_1 :\n",
    "    'código a executar se a condição_1 for verdadeira'\n",
    "\n",
    "elif condição_2:\n",
    "    'código a executar se a condição_1 for falsa e a condição_2 verdadeira'\n",
    "       \n",
    "else:\n",
    "    'código a executar se todas as condições anteriores forem falsas'\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Definindo funções: `def`, `return`.\n",
    "\n",
    "#### As funções são um conjunto de instruções executadas através de um nome ou alias. A ideia da definição de funções é separar o problema a ser resolvido em partes menores.\n",
    "\n",
    "#### Para definir uma função é preciso seguir, no mínimo, esses passos:\n",
    "       \n",
    "    * Realizar uma chamada à instrução `def`\n",
    "    * Enunciar o nome da função \n",
    "    * Escrever parênteses\n",
    "    * Declarar, se existirem, os argumentos dentro dos parênteses, separados por vírgulas. (opcional)\n",
    "    * Escrever dois pontos.\n",
    "    * Escrever o corpo da função.\n",
    "    * Retornar um resultado com return (opcional).\n",
    "       \n",
    "#### A seguir, um exemplo de declaração de uma função:\n",
    "\n",
    "``` python \n",
    "def myFunction(argumento_1, argumento_2, ...):\n",
    "    \n",
    "    if argumento_1 > argumento_2:\n",
    "        \n",
    "        print(argumento_1, ' é maior que ', argumento_2)\n",
    "    \n",
    "    else:\n",
    "        print(argumento_1, ' não é maior que ', argumento_2)\n",
    "    \n",
    "    return(argumento_1 + argumento_2)\n",
    "\n",
    "```\n",
    "\n",
    "#### Os argumentos são variáveis que existirão no espaço de definição de uma função.\n",
    "\n",
    "#### Neste exemplo, podemos ver que os argumentos são avaliados pelos condicionais `if`/ `else` e que a soma de ambos argumentos é finalmente retornada.\n",
    "\n",
    "#### Se a expressão retornada pelo return for um tipo de dados válido, então podemos trabalhar com esse dado. Vejamos este exemplo.\n",
    "\n",
    "### Definimos a função anterior:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def minhafunção(argumento_1, argumento_2):\n",
    "\n",
    "    if argumento_1 > argumento_2:\n",
    "        pass \n",
    "        #print(argumento_1, ' é maior que ', argumento_2)\n",
    "\n",
    "    else:\n",
    "        pass\n",
    "        #print(argumento_1, ' não é maior que ', argumento_2)\n",
    "\n",
    "    return(argumento_1 + argumento_2)\n",
    "\n",
    "minhafunção(-1, 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Agora a função está no espaço de memória sob o nome de `minhafunção`. Para fazer uma chamada a essa função para que o código dentro dela seja executado, basta enunciar seu nome e entregar os argumentos entre parênteses de forma organizada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3  não é maior que  5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Vamos atribuir o valor do resultado desta função a uma variável.\n",
    "variável_1 = minhafunção(3, 5)\n",
    "#variável_1 = minhafunção(argumento_1, argumento_2)\n",
    "variável_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "# Agora vejamos o que restou na variável_1\n",
    "print(variável_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Como podemos ver na função, há chamadas ao print, que imprimem dependendo da avaliação do `if`/`else` o que indicamos em cada corpo condicional, porém o valor que é capturado para operar é o que retorna a instrução `return`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### O que o código a seguir faz?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista_de_números = [-1, -51, -4, 42, 23, 4, 5, 6, 72, 4, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, -40, 7, 53, 34, 15, 16, 17, 83, 15, 16]"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "somas = []\n",
    "\n",
    "for número in lista_de_números:\n",
    "    \n",
    "    somas.append( minhafunção(8, número + 3) )\n",
    "somas    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### E o próximo?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "somas = []\n",
    "\n",
    "for número in lista_de_números:\n",
    "    if minhafunção(número, 3) < número:\n",
    "        somas.append(número)\n",
    "    \n",
    "    else:\n",
    "        somas.append( minhafunção(número, 2) ** minhafunção(minhafunção(número, -31), 3) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0, -2.982013997898911e-134, 2.3283064365386963e-10, 101938319743841411792896, 1.024e-07, 2.1104253300858436e-19, 3.653802593060306e-20, 1.3552527156068805e-20, 17627700705296501921701017350482177806873007670837740222550443628435829182301208576, 2.1104253300858436e-19, 3.653802593060306e-20]\n"
     ]
    }
   ],
   "source": [
    "print(somas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c\n",
      "o\n",
      "m\n",
      "p\n",
      "u\n",
      "t\n",
      "e\n",
      "r\n"
     ]
    }
   ],
   "source": [
    "world = 'computer' \n",
    "for i in world:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter text, [type \"stop\" to quit]:  stop\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "stop\n",
      "\n"
     ]
    }
   ],
   "source": [
    "replys = []\n",
    "while True:\n",
    "    reply = input('Enter text, [type \"stop\" to quit]: ')\n",
    "    print(reply)\n",
    "    if reply == 'stop' or reply == ' ':\n",
    "        print(\" \".join(replys))\n",
    "        break\n",
    "        replys.append(replys)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PRATICA INDEPENDENTE 1 - Revisão Python 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 1 : Defina os objetos `x` e  `y` com valores inteiros, realize as quatro operações básicas, além da potenciação e da radiciação, com os objetos e imprima cada um dos resultados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### vjhvljvhlv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mk' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-4c5d8bd1720a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m4\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mmk\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mmnkn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mknk\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'mk' is not defined"
     ]
    }
   ],
   "source": [
    "y = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x + y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x - y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "81"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x**y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.7320508075688772"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x**0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 2 : Crie os objeto `D` e `H`, para receberem as `string` `'Digital'` e `'House'`, realize a concatenação dos objetos e imprima o resultado na tela."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "D = 'Digital'\n",
    "H = ' House'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Digital House'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D + H"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 3 : Crie uma tupla `T`  com três inteiros, imprima o segundo na tela e some  uma unidade ao valor do terceiro."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "T = [1, 2, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(T[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 6]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T[2] = T[2] + 1\n",
    "T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 4 : Crie uma lista `L`  com quatro strings, imprima o segundo na tela e altere o valor do terceiro."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A', 'B', 'C', 'D']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L = ['A', 'B', 'C', 'D']\n",
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'B'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A', 'B', 234, 'D']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[2] = 234\n",
    "L"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 5 : Crie uma lista `D`  com três pares chave valor e imprima o dicionário na tela. Adicione um quarto par ao dicionário criado e atualize a primeira chave com um novo valor, imprimindo-o na tela. Por fim, calcule a soma/concatenação entre os elementos da primeira e da segunda chave."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "D = {'a': 'b', 'B': 'C', 1: 3, 4: 'ola'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'a': 'b', 'B': 'C', 1: 3, 4: 'ola'}\n"
     ]
    }
   ],
   "source": [
    "print(D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': 'b', 'B': 'C', 1: 3, 4: 'ola', 'add': 999}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D['add'] = 999\n",
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': 'KKKKKKKKKK', 'B': 'C', 1: 'a2', 4: 'ola', 'add': 999, 0: {'a2'}}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D['a'] = 'KKKKKKKKKK'\n",
    "D[0] = {'a2'}\n",
    "\n",
    "D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 6 : Crie uma lista `L`  com quatro inteiros e então some o elemento da primeira com o da ultima posição, imprima o resultado na tela."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 7, 2, 3]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L = [1, 7, 2, 3]\n",
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[0] + L[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 7 : Defina dois objetos do tipo inteiros, calcule a divisão de um pelo outro e imprima na tela o resto dessa divisão."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 7 \n",
    "y = 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7777777777777778"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x/y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x%y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 8 : Defina um objeto composto por uma sequência (>3) `strings` e imprima na tela a string multiplicada pelo númere de elementos que ela tiver."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "S = []\n",
    "for i in range(12):\n",
    "    S.append(\"AKJAKJANL\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
n"
     ]
    }
   ],
   "source": [
    "print(S*len(S))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A seguir um objeto a ser utilizado nas questões 9 e 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'O céu não é só um chapéu azul que o mundo usa.'"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 'O céu não é só um chapéu azul que o mundo usa.'\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 9 : Dado o objeto `x` acima, faça um `slice` separando o trecho \"chapéu azul\" em um segundo objeto `y`  e imprima o resultado na tela."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'chapéu azul'"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = x[len('O céu não é só um '):len('O céu não é só um chapéu azul')]\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 10 :  Crie uma objeto `y` complementar à `x` e realize a concatenação dos objetos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'O céu não é só um chapéu azul que o mundo usa.chapéu azul'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = x + y\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PRATICA INDEPENDENTE 2 - Revisão Python 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 1 : Crie uma lista com cinco nomes e imprima os valores na tela e então crie um subset com os elementos indexados por 0, 1 e 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Icaro', 'Thor', 'Demeter', 'Odin', 'Ifrit']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LN = [\"Icaro\", \"Thor\", \"Demeter\", \"Odin\", \"Ifrit\"]\n",
    "LN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Thor', 'Demeter', 'Ifrit']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LNS = [LN[1], LN[2], LN[4]]\n",
    "LNS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 2 : Crie uma lista com os números da data de hoje e da hora em que você lê esse problema e depois ordene-os do menor para o maior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[31, 12, 2020, 9, 35]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L2 = [31, 12, 2020, 9, 35]\n",
    "L2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[9, 12, 31, 35, 2020]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L2.sort()\n",
    "L2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 3 : Apostile o dia da semana à lista de números que você no exercício 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[9, 12, 31, 35, 2020, 'Quinta-feita']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L2.append(\"Quinta-feita\")\n",
    "L2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 4 : Tomando lista construída no exercício 2, realize sua concatenação com a lista  `L4`, que o curso e a turma da aula de hoje."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Turma', 'DataScience', 9, 12, 31, 35, 2020, 'Quinta-feita']"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L4 = [\"Turma\", \"DataScience\"]\n",
    "L = L4 + L2\n",
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 5 : Compare os métodos `.remove()` e `del()` para extrair os dois últimos elementos da lista gerada no exercício anterior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 6 : Considerando a lista de objetos a seguir, insira o elemento `'fogão'`, em sua posição de índice 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "Obj = ['mesa', 'cadeira', 'armário', 'cama', 'colchão', 'geladeira']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 7 : Extenda a lista de objetos `Obj` com a lista `['microondas', 'geladeira']`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['mesa', 'cadeira', 'armário', 'microondas', 'geladeira']"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L_ext = Obj + ['microondas', 'geladeira']\n",
    "L_ext"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 8 : Conte o número de vezes que o elemento `'geladeira'`  aparece na lista `Obj` e imprima o índice em que o primeiro caso ocorre."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A palavra geladeira aparece 1 vezes nas posições: [4]\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "index = []\n",
    "for i in range(len(L_ext)):\n",
    "    if L_ext[i] == 'geladeira':\n",
    "        count += 1\n",
    "        index += [i]\n",
    "print(\"A palavra \" + 'geladeira ' + \"aparece \" + str(count) + \" vezes\" + \" nas posições: \" + str(index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 9 : Aplique o método `.pop()` para extrair o último elemento da lista `Obj`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['mesa', 'cadeira', 'armário']"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Obj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'cama'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Obj_pop = Obj.pop()\n",
    "Obj_pop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['mesa', 'cadeira', 'armário', 'cama', 'colchão', 'geladeira']"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Obj"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 10 : Inverta a ordem da disposição de elementos na lista `Obj`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['geladeira', 'colchão', 'cama', 'armário', 'cadeira', 'mesa']"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Obj_invert = [Obj[-(i+1)] for i in range(len(Obj))]\n",
    "Obj_invert"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 11 : Crie um dicionário com cinco pares chave valor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'mesa', 2: 'cadeira', 3: 'copo', 4: 'chave', '5': 'cama'}"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict = {1: 'mesa', 2: 'cadeira', 3: 'copo', 4: 'chave', '5': 'cama'}\n",
    "dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 12 : Imprima em tela apenas as chaves do dicionário criado no exercício anterior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys([1, 2, 3, 4, '5'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dict_keys([1, 2, 3, 4, '5'])"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(dict.keys())\n",
    "dict.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 13 : imprima em tela os pares chave valor  do dicionário que você criou no exercício 11."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'mesa', 2: 'cadeira', 3: 'copo', 4: 'chave', '5': 'cama'}"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 14: Atualize o dicionário criado no exercício 11 com os dicionário apresentado a seguir."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "Dict2 = {'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'mesa',\n",
       " 2: 'cadeira',\n",
       " 3: 'copo',\n",
       " 4: 'chave',\n",
       " '5': 'cama',\n",
       " 'f': 6,\n",
       " 'g': 7,\n",
       " 'h': 8,\n",
       " 'i': 9,\n",
       " 'j': 10}"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict.update(Dict2)\n",
    "dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 15: Salve em um objeto o valor associado à chave `h` do dicionário atualizado."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict['h'] = 'Exercício 15: Salve em um objeto o valor associado à chave h do dicionário atualizado.'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'mesa',\n",
       " 2: 'cadeira',\n",
       " 3: 'copo',\n",
       " 4: 'chave',\n",
       " '5': 'cama',\n",
       " 'f': 6,\n",
       " 'g': 7,\n",
       " 'h': 'Exercício 15: Salve em um objeto o valor associado à chave h do dicionário atualizado.',\n",
       " 'i': 9,\n",
       " 'j': 10}"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 16: Por fim, limpe o dicionário que você criou."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict.clear()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PRATICA INDEPENDENTE 3 - Revisão Python 2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IF/ELSE:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 1 : Escreva um estrutura `if` que lê informações de peso de bagagem e que retorna uma informação sobre excesso caso o valor supere 50 kg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O peso da bagagem excedeu o limite de 50 em: 49 kg.\n"
     ]
    }
   ],
   "source": [
    "P = 99\n",
    "if P > 50:\n",
    "    excesso = P - 50\n",
    "    print(\"O peso da bagagem excedeu o limite de 50 em: \"  + str(excesso) + \" kg.\")\n",
    "else:\n",
    "    print(\"A bagagem não excedeu o limite de peso!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 2: Escreva uma estrutura `if` que lê um valor inteiro e imprime uma mensagem caso ele seja maior que 10.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O valor é maior que dez em 13.\n"
     ]
    }
   ],
   "source": [
    "I = 23\n",
    "if I > 10:\n",
    "    excesso_I = I - 10\n",
    "    print(\"O valor é maior que dez em \" + str(excesso_I) + \".\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 3: Escreva uma estrutura `if` que lê um valor inteiro e imprime uma mensagem caso ele seja menor que 10 ou outra, case seja maior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O valor é menor que dez em 8.\n"
     ]
    }
   ],
   "source": [
    "I = 2\n",
    "if I > 10:\n",
    "    excesso_I = I - 10\n",
    "    print(\"O valor é maior que dez em \" + str(excesso_I) + \".\")\n",
    "if I < 10:\n",
    "    menor_I = 10 - I\n",
    "    print(\"O valor é menor que dez em \" + str(menor_I) + \".\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IF/ELIF/ELSE:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 4: Escreva uma estrutura `if` que recebe um valor, teste se ele é igual à `10`, `15` ou `20` ou retorna uma mensagem avisando que o valor lido não consta na estrutura."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O valor não consta na estrutura!\n"
     ]
    }
   ],
   "source": [
    "valor = 16\n",
    "teste = [10, 15, 20]\n",
    "\n",
    "if valor in teste:\n",
    "    print(\"O valor consta na estrutura!\")\n",
    "else:\n",
    "    print(\"O valor não consta na estrutura!\")    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 5: Escreva uma estrutura `if` que recebe um valor, teste se ele é positivo, negativo ou igual à zero, ou outra possibilidade e retorne a informação."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O número é positivo!\n"
     ]
    }
   ],
   "source": [
    "valor = 10.\n",
    "if type(valor) == str:\n",
    "    print('Foi inserida uma string')\n",
    "else:\n",
    "    if valor > 0:\n",
    "        print(\"O número é positivo!\")\n",
    "    elif valor == 0:\n",
    "        print(\"O número é igual a zero!\")   \n",
    "    elif valor < 0:\n",
    "        print(\"O número é negativo!\")    \n",
    "    else:\n",
    "        print(\"Não é um número!\")    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loop FOR:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 6: Dada a lista de palavras a seguir, escreva um loop `for` que leia as palavras e que imprima na tela a própria palavra e o seu comprimento."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 Dada\n",
      "1 a\n",
      "5 lista\n",
      "2 de\n",
      "8 palavras\n",
      "1 a\n",
      "7 seguir,\n",
      "7 escreva\n",
      "2 um\n",
      "4 loop\n",
      "3 for\n",
      "3 que\n",
      "4 leia\n",
      "2 as\n",
      "8 palavras\n",
      "1 e\n",
      "3 que\n",
      "7 imprima\n",
      "2 na\n",
      "4 tela\n",
      "1 a\n",
      "7 própria\n",
      "7 palavra\n",
      "1 e\n",
      "1 o\n",
      "3 seu\n",
      "12 comprimento.\n"
     ]
    }
   ],
   "source": [
    "lst_words = 'Dada a lista de palavras a seguir, escreva um loop for que leia as palavras e que imprima na tela a própria palavra e o seu comprimento.'\n",
    "lst_words = lst_words.split()\n",
    "lst_words\n",
    "\n",
    "for word in lst_words:\n",
    "    print(len(word), word)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 7: Escreva uma estrutura de loop `for` que receba um valor inteiro e imprima na tela os valores contidos no `range(0, n)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "n = 7\n",
    "for i in range(0, n):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 8: Escreva um loop `for` que leia uma lista de valores e imprima na tela cada elemento.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "4\n",
      "6\n",
      "22\n",
      "11\n",
      "67\n",
      "87\n"
     ]
    }
   ],
   "source": [
    "lst_v = [1, 2, 4, 6, 22, 11, 67, 87]\n",
    "for i in lst_v:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 9: Escreva um loop `for` que leia uma tupla de valores e imprima na tela cada elemento.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('abc', 34, True, 40, 'male')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuple1 = (\"abc\", 34, True, 40, \"male\")\n",
    "tuple1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('apple', 'banana', 'cherry')"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuple2 = (\"apple\", \"banana\", \"cherry\")\n",
    "tuple2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('abc', 'apple', 'abc')\n",
      "(34, 'banana', 34)\n",
      "(True, 'cherry', True)\n"
     ]
    }
   ],
   "source": [
    "tuple3 = zip(tuple1, tuple2, tuple1)\n",
    "for i in tuple3:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 10: Escreva um loop `for` que leia uma string de valores e imprima na tela cada elemento."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "1\n",
      "9\n",
      "23\n",
      "45\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "str_v = '10, 1, 9, 23, 45, 9'\n",
    "str_v = str_v.split(\", \")\n",
    "for i in str_v:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 11: Escreva um loop `for` que leia os pares chave valor de dicionário e os imprima na tela."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 11.1. Cria um dicionário:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': 1, 'B': 2, 'C': 3}"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a_dict = {\"a\": 1, \"B\": 2, \"C\": 3}\n",
    "a_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'a': 1, 'C': 3, 'Gol': 2}\n"
     ]
    }
   ],
   "source": [
    "new_key = \"Gol\"\n",
    "old_key = \"B\"\n",
    "a_dict[new_key] = a_dict.pop(old_key)\n",
    "\n",
    "print(a_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 4, 6, 22, 11, 67, 87]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lst_dic = [1, 2, 4, 6, 22, 11, 67, 87]\n",
    "lst_dic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': 1, 'c': 4, 'gh': 3}"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict_t001 = dict(a=1, c=4, gh=3)\n",
    "dict_t001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 1, 2: 2, 4: 4, 6: 6, 22: 22, 11: 11, 67: 67, 87: 87}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = {}\n",
    "for i, v in zip(lst_dic, lst_dic):\n",
    "    d[i] = v\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 12: Escreva um loop `for` que leia uma lista de dados e, usando a função `range` e o comprimento `len` da lista, imprima cada um dos elementos, de acordo com seu índice na lista. Certifique-se que a estrutura `for` avise quando sair do loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loop While."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 13: Construa uma estrutura `while` que inicie um objeto de contagem, teste se ele é menor que um determinado valor de corte, adicione uma unidade ao contador e imprima uma mensagem na tela."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 14:  Escreva um loop while que receba uma `palavra`, inicie um contador `n` e que imprima na tela o produto `n*palavra` enquanto `n` for menor que o comprimento da palavra."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 15:  Construa uma estrutura que combine as ferramentas `while` e `else`, em que um valor de corte é recebido e a contagem imprima o resultado do teste `while` a cada loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 16:  Rode o código abaixo e discuta seu resultado."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "count = 0\n",
    "while (count == 0): \n",
    "    print(\"Repetition\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Funções."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 17:  Defina uma função que recebe uma lista de valores e, ao ser chamada, atualize o valor do último índice da lista."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 18:  Escreva uma função que receba um par de valores `(x, y)`, e os imprima na tela em ordem invertida."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 19: Escreva uma função que receba o valor do raio de uma circunferência e calcule sua área."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercício 20: Escreva uma função que receba um valor, calcule se ele é par ou impar e imprima o resultado na tela."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
